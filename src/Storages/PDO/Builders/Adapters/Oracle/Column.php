<?php
declare (strict_types = 1);
/**
 * This file is part of Scaleum Framework.
 *
 * (C) 2009-2025 Maxim Kirichenko <kirichenko.maxim@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Scaleum\Storages\PDO\Builders\Adapters\Oracle;

use Scaleum\Storages\PDO\Builders\ColumnBuilder;

/**
 * Column
 *
 * @author Maxim Kirichenko <kirichenko.maxim@gmail.com>
 */
class Column extends ColumnBuilder {
    protected string $identifierQuoteLeft  = '"';
    protected string $identifierQuoteRight = '"';
    protected array $tableTypes                  = [
        self::TYPE_PK          => 'NUMBER(10) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY',
        self::TYPE_BIGPK       => 'NUMBER(19) GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY',
        self::TYPE_STRING      => 'VARCHAR2(%s)',
        self::TYPE_TEXT        => 'CLOB',
        self::TYPE_MEDIUM_TEXT => 'CLOB',
        self::TYPE_LONG_TEXT   => 'CLOB',
        self::TYPE_TINYINT     => 'NUMBER(%s)',
        self::TYPE_SMALLINT    => 'NUMBER(%s)',
        self::TYPE_INTEGER     => 'NUMBER(%s)',
        self::TYPE_BIGINT      => 'NUMBER(%s)',
        self::TYPE_FLOAT       => 'BINARY_FLOAT',
        self::TYPE_DOUBLE      => 'BINARY_DOUBLE',
        self::TYPE_DECIMAL     => 'NUMBER(%s)',
        self::TYPE_DATETIME    => 'TIMESTAMP',
        self::TYPE_TIMESTAMP   => 'TIMESTAMP',
        self::TYPE_TIME        => 'TIMESTAMP',
        self::TYPE_DATE        => 'DATE',
        self::TYPE_BINARY      => 'BLOB',
        self::TYPE_BOOLEAN     => 'NUMBER(%s)', // В Oracle нет BOOLEAN, используют 0/1 в NUMBER(1)
        self::TYPE_MONEY       => 'NUMBER(%s)',
        self::TYPE_JSON        => 'CLOB', // В Oracle 12+ есть JSON, но хранится в CLOB
    ];
    
    protected array $tableDefaults = [
        self::TYPE_PK          => null, // NUMBER(10) GENERATED не требует размера
        self::TYPE_BIGPK       => null,
        self::TYPE_STRING      => 255,
        self::TYPE_TEXT        => null, // CLOB не требует размера
        self::TYPE_MEDIUM_TEXT => null,
        self::TYPE_LONG_TEXT   => null,
        self::TYPE_TINYINT     => 3,    // В Oracle нет TINYINT, используют NUMBER(3)
        self::TYPE_SMALLINT    => 6,    // Аналог SMALLINT = NUMBER(6)
        self::TYPE_INTEGER     => 10,   // INTEGER = NUMBER(10)
        self::TYPE_BIGINT      => 19,   // BIGINT = NUMBER(19)
        self::TYPE_FLOAT       => null, // BINARY_FLOAT не требует размеров
        self::TYPE_DOUBLE      => null, // BINARY_DOUBLE тоже
        self::TYPE_DECIMAL     => [10, 0],
        self::TYPE_DATETIME    => null,
        self::TYPE_TIMESTAMP   => null,
        self::TYPE_TIME        => null,
        self::TYPE_DATE        => null,
        self::TYPE_BINARY      => null,    // BLOB не требует размера
        self::TYPE_BOOLEAN     => 1,       // В Oracle нет BOOLEAN, используют NUMBER(1)
        self::TYPE_MONEY       => [19, 4], // MONEY = NUMBER(19,4)
        self::TYPE_JSON        => null,    // JSON хранится в CLOB
    ];

    protected function makeLocation(): string {
        return '';
    }

    protected function makeComment(): string {
        return '';
    }

    protected function makeDefault(): string {
        if ($this->default === null) {
            return '';
        }

        $result = ' DEFAULT ';
        switch (gettype($this->default)) {
        case 'string':
            if (strtoupper($this->default) === 'CURRENT_TIMESTAMP') {
                $result .= 'SYSDATE';
            } else {
                $result .= $this->default;
            }
            break;
        case 'integer':
            $result .= (string) $this->default;
            break;
        case 'double':
        case 'float':
            $result .= str_replace(',', '.', (string) $this->default);
            break;
        case 'boolean':
            $result .= $this->default ? 'TRUE' : 'FALSE';
            break;
        default:
            $result .= $this->default;
        }

        return $result;
    }

    protected function makeUnique(): string {
        return $this->isUnique ? sprintf(' CONSTRAINT UQ_%s UNIQUE (%s)', $this->protectIdentifiers($this->column), $this->protectIdentifiers($this->column)) : '';
    }
}
/** End of Column **/